<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024.01日记</title>
    <url>/2024/01/10/2024-01%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="d6b83fd72e66735eb1946bf98fa6ddc5c397195982055e14929795a32448ab60">e6394f24cbc4b9c257a947e9735531ad27e1dc5709ab25d7f929947e98f2bd8ece64a5ed3534085f147ae1cc0dbf4284edee046664a53b665af3cb1e8595ccaa1c79b74ba3fbcac0c338fc75295fd18355f0c3f191bb071174e0121a0ebfa12ec639fad1027dd05297c897ffc8ca465ae9b03fe88899ca04b5b46acfa7a1e2e2abf10af32c2ce9bf0100312f64f320cc98c35de7d3adb87ea83468013f68dd81cea16dddcc3633ba040e46a0aa98abcbb0c7b6f89a2ee481a8a49f44725252c2568e2a76e27d602c15bcea625f56d99bf4288730e3debc7b47b13a10c5a29488e6a5424afcebdd4b82972f95aa1f69f8644be4922e8ab1754754d3e681860bad61eab0b052f2df3c926bcc1c3c7388c8cc7d74ff7002ae651af30ae55a6450efb90511207adb4ea64a7b9592d967f41727875709a3dec8421914fe3d733f93fbb28ad6f141d3671e57b554c60bb2924e618a4ed6e9569cf8c9307b4d267e0b13c19fd246776c8b3e3d079be8348187c34354c97bcef48b7ab3630375ede6f411f0adbe2dbc70c0c84cda65c990a470ae</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>API测试</title>
    <url>/2024/01/11/API%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="9种API测试"><a href="#9种API测试" class="headerlink" title="9种API测试"></a>9种API测试</h1><p><img src="/../images/c53f283e-6834-45b6-beb9-57b10b2a22fd_1280x1664.webp" alt="c53f283e-6834-45b6-beb9-57b10b2a22fd_1280x1664.webp"></p>
]]></content>
  </entry>
  <entry>
    <title>API安全技巧</title>
    <url>/2024/01/11/API%E5%AE%89%E5%85%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="API-安全的-12-个技巧"><a href="#API-安全的-12-个技巧" class="headerlink" title="API 安全的 12 个技巧"></a>API 安全的 12 个技巧</h1><p><img src="/../images/45d16bfb-c541-4c01-8574-63cc39a5c560_1280x1664.webp" alt="45d16bfb-c541-4c01-8574-63cc39a5c560_1280x1664.webp"></p>
<h1 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>为了理解OAuth的适用场合，让我举一个假设的例子。</p>
<p>有一个”云冲印”的网站，可以将用户储存在Google的照片，冲印出来。用户为了使用该服务，必须让”云冲印”读取自己储存在Google上的照片。</p>
<p>云冲印<br><img src="/../images/bg2014051202.png" alt="bg2014051202.png"></p>
<p>问题是只有得到用户的授权，Google才会同意”云冲印”读取这些照片。那么，”云冲印”怎样获得用户的授权呢？</p>
<p>传统方法是，用户将自己的Google用户名和密码，告诉”云冲印”，后者就可以读取用户的照片了。这样的做法有以下几个严重的缺点。</p>
<p>（1）”云冲印”为了后续的服务，会保存用户的密码，这样很不安全。<br>（2）Google不得不部署密码登录，而我们知道，单纯的密码登录并不安全。<br>（3）”云冲印”拥有了获取用户储存在Google所有资料的权力，用户没法限制”云冲印”获得授权的范围和有效期。<br>（4）用户只有修改密码，才能收回赋予”云冲印”的权力。但是这样做，会使得其他所有获得用户授权的第三方应用程序全部失效。<br>（5）只要有一个第三方应用程序被破解，就会导致用户密码泄漏，以及所有被密码保护的数据泄漏。</p>
<p>OAuth就是为了解决上面这些问题而诞生的。</p>
<p><img src="/../images/v2-fccac16d440911894f2ff356064563e9_1440w.webp" alt="v2-fccac16d440911894f2ff356064563e9_1440w.webp"><br>（A）用户打开客户端以后，客户端要求用户给予授权。<br>（B）用户同意给予客户端授权。<br>（C）客户端使用上一步获得的授权，向认证服务器申请令牌。<br>（D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。<br>（E）客户端使用令牌，向资源服务器申请获取资源。<br>（F）资源服务器确认令牌无误，同意向客户端开放资源。</p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ol>
<li><a href="https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>JIT和AOT</title>
    <url>/2024/01/12/JIT%E5%92%8CAOT/</url>
    <content><![CDATA[<h1 id="AOT，JIT是什么"><a href="#AOT，JIT是什么" class="headerlink" title="AOT，JIT是什么"></a>AOT，JIT是什么</h1><p>程序主要有两种运行方式：静态编译与动态解释。</p>
<p>静态编译的程序在执行前全部被翻译为机器码，通常将这种类型称为AOT （Ahead of time）即 “提前编译”；<br>而解释执行的则是一句一句边翻译边运行，通常将这种类型称为JIT（Just-in-time）即“即时编译”。</p>
<blockquote>
<p>AOT的标准就是看代码在执行之前是否需要编译，只要需要编译，无论其编译产物是字节码还是机器码，都属于AOT。</p>
</blockquote>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>这两种编译方式的主要区别在于是否在“运行时”进行编译。</p>
<h1 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h1><p>JIT优点：</p>
<ol>
<li>可以根据当前硬件情况实时编译生成最优机器指令（ps. AOT也可以做到，在用户使用是使用字节码根据机器情况在做一次编译）</li>
<li>可以根据当前程序的运行情况生成最优的机器指令序列</li>
<li>当程序需要支持动态链接时，只能使用JIT</li>
<li>可以根据进程中内存的实际情况调整代码，使内存能够更充分的利用</li>
</ol>
<p>JIT缺点：</p>
<ol>
<li>编译需要占用运行时资源，会导致进程卡顿</li>
<li>由于编译时间需要占用运行时间，对于某些代码的编译优化不能完全支持，需要在程序流畅和编译时间之间做权衡</li>
<li>在编译准备和识别频繁使用的方法需要占用时间，使得初始编译不能达到最高性能</li>
</ol>
<p>AOT优点：</p>
<ol>
<li>在程序运行前编译，可以避免在运行时的编译性能消耗和内存消耗</li>
<li>可以在程序运行初期就达到最高性能</li>
<li>可以显著的加快程序的启动</li>
</ol>
<p>AOT缺点： </p>
<ol>
<li>在程序运行前编译会使程序安装的时间增加</li>
<li>牺牲Java的一致性</li>
<li>将提前编译的内容保存会占用更多的外存</li>
</ol>
<h1 id="JIT深度解析"><a href="#JIT深度解析" class="headerlink" title="JIT深度解析"></a>JIT深度解析</h1><p><img src="/../images/213b5edeabce499182278d7730227019.png" alt="213b5edeabce499182278d7730227019.png"></p>
<p>对于一个长期运行的Java进程来说，每次执行都要经过 解释器 将程序翻译成机器指令去执行，那么这个效率就不是很好，这也是为什么Java被吐槽慢的缘故，<br>所以为了解决这个问题，才出现了 JIT。对于一些热点代码（经常被执行的，for循环）的一些代码，在运行时，JVM会将这些代码编译成机器可以执行的机器码，并缓存起来，这样下次执行这些代码的时候，就不需要再经过 解释器去编译了，机器可以直接运行这段程序，提高性能，这个就被称为 即时编译器，简称 JIT编译器。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://blog.csdn.net/cristianoxm/article/details/126032096">JIT VS AOT</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>V8技能树</title>
    <url>/2024/01/10/%E4%BA%86%E8%A7%A3V8/</url>
    <content><![CDATA[<h1 id="什么是-V8"><a href="#什么是-V8" class="headerlink" title="什么是 V8?"></a>什么是 V8?</h1><p>V8 是 JavaScript 虚拟机的一种。将人类能够理解的编程语言 JavaScript，翻译成机器能够理解的机器语言。</p>
<p><img src="/../images/download.jpg" alt="download.jpg"></p>
<h1 id="V8编译流水线"><a href="#V8编译流水线" class="headerlink" title="V8编译流水线"></a>V8编译流水线</h1><p><img src="/../images/%E4%B8%8B%E8%BD%BD%20(1).jpeg" alt="下载 (1).jpeg"></p>
<ol>
<li>初始化基础环境；</li>
<li>解析源码生成 AST 和作用域；</li>
<li>依据 AST 和作用域生成字节码；</li>
<li>解释执行字节码；监听热点代码；</li>
<li>优化热点代码为二进制的机器代码；</li>
<li>反优化生成的二进制机器代码。</li>
</ol>
<p>这里你需要注意的是，JavaScript 是一门动态语言，在运行过程中，某些被优化的结构可能会被 V8 动态修改了，这会导致之前被优化的代码失效，如果某块优化之后的代码失效了，那么编译器需要执行反优化操作。</p>
<p>编译流水线本身并不复杂，但是其中涉及到了很多技术，诸如 JIT、延迟解析、隐藏类、内<br>联缓存等等。</p>
<p>要想充分了解 V8 是怎么工作的，除了要分析编译流水线，我们还需要了解另外两个非常重要的特性，那就是事件循环系统和垃圾回收机制。</p>
<h1 id="技能树"><a href="#技能树" class="headerlink" title="技能树"></a>技能树</h1><p><img src="/../images/%E4%B8%8B%E8%BD%BD%20(2).jpeg" alt="下载 (2).jpeg"></p>
]]></content>
  </entry>
  <entry>
    <title>前端架构</title>
    <url>/2024/01/11/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h1 id="五种前端架构"><a href="#五种前端架构" class="headerlink" title="五种前端架构"></a>五种前端架构</h1><p><img src="/../images/F_38UuNbEAACWtu.jpeg" alt="F_38UuNbEAACWtu.jpeg"></p>
]]></content>
  </entry>
  <entry>
    <title>网络</title>
    <url>/2024/01/11/%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="8-种常用网络协议"><a href="#8-种常用网络协议" class="headerlink" title="8 种常用网络协议"></a>8 种常用网络协议</h1><p><img src="/../images/20231021-bf786236-f777-481b-ba9e-65921c16752e.gif" alt="20231021-bf786236-f777-481b-ba9e-65921c16752e.gif"></p>
<h1 id="Cookies-与-Sessions"><a href="#Cookies-与-Sessions" class="headerlink" title="Cookies 与 Sessions"></a>Cookies 与 Sessions</h1><p><img src="/../images/c05744c903f54153a28805cd182107bb~tplv-obj_1280_1664.gif" alt="c05744c903f54153a28805cd182107bb~tplv-obj_1280_1664.gif"></p>
<h1 id="URL-URI-URN"><a href="#URL-URI-URN" class="headerlink" title="URL, URI, URN"></a>URL, URI, URN</h1><p><img src="/../images/0_cU9y8hm7YEjkVZBJ.webp" alt="0_cU9y8hm7YEjkVZBJ.webp"></p>
<h1 id="OSI七层网络模型"><a href="#OSI七层网络模型" class="headerlink" title="OSI七层网络模型"></a>OSI七层网络模型</h1><p><img src="/../images/1704001549342.gif" alt="1704001549342.gif"></p>
<h1 id="在浏览器中输入一个网址后到底发生了什么？"><a href="#在浏览器中输入一个网址后到底发生了什么？" class="headerlink" title="在浏览器中输入一个网址后到底发生了什么？"></a>在浏览器中输入一个网址后到底发生了什么？</h1><p><img src="/../images/8d954f9b42c64ea0ab9be4567e38f523~tplv-obj_550_715.gif" alt="8d954f9b42c64ea0ab9be4567e38f523~tplv-obj_550_715.gif"></p>
<h1 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h1><p><img src="/../images/1475ba84-8106-4d61-924e-6403cfdc1074_1280x1664.webp" alt="1475ba84-8106-4d61-924e-6403cfdc1074_1280x1664.webp"></p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/663267550">用一张动图解释 8 种常用网络协议</a></li>
<li><a href="https://blog.bytebytego.com/p/ep80-explaining-8-popular-network">EP80: Explaining 8 Popular Network Protocols in 1 Diagram</a></li>
</ol>
]]></content>
  </entry>
</search>
